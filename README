This directory contains pieces of an implementation of quirk24,
along with a few examples and some documentation.

Files:

    README                this file
    VERSION               current version number for all files
    parser24              executable parser
    typecheck24           executable type checker
    interp24              executable interpreter

    parser24.sps.fasl     compiled code needed by parser24
    typecheck24.sps.fasl  compiled code needed by typecheck24
    interp24.sps.fasl     compiled code needed by interp24

    example1.q24          an example illustrating the type system
    example2.q24          an example illustrating expressions
    example3.q24          an example illustrating integer overflow
    example4.q24          an example using both arrays and lists

****************************************************************

The parser can be invoked as in the following example:

    /course/cs7400f18/Quirk24/parser24 example1.q24 example1.ast

The example1.q24 file must already exist and must contain quirk24
code.  The example1.ast file will be deleted if it already exists.
In any case, the abstract syntax tree for example1.q24 will be
written to example1.ast.

****************************************************************

The type checker can be invoked as in the following example:

    /course/cs7400f18/Quirk24/typecheck24 example4.ast example4.ast2

The example4.q24 file must already exist and must contain an
abstract syntax tree produced by parser24.  The example4.ast2
file will be deleted if it already exists.  In any case, an
abstract syntax tree will be written to example4.ast2.

****************************************************************

The interpreter can be invoked as in the following example:

    /course/cs7400f18/Quirk24/interp24 example4.ast2

The example4.ast2 file must already exist.

That abstract syntax tree should be as produced by the type
checker.  As a temporary expedient, however, the interpreter
found in this directory will accept abstract syntax trees
produced by the parser provided they would be accepted as
well-typed by the type checker.  (Interpreters written by
students need only accept as input abstract syntax trees
produced by type checkers.)

****************************************************************

Change history.

Version -3 (in progress; more changes may be added here)

    Added (illegal) production for <program>.
    Added description of the small differences between abstract
        syntax trees produced by parser and abstract syntax
        trees produced by type checkers.
    Added -:int and -:flt productions for <unop>.

Version -4

    Added type checker.
    Corrected type errors in example programs.

Version -5

    Allowed any type within the angle brackets of a <typeapp>.

Version -6

    Allowed "return;" as well as "return <exp>;".
    Added "halt(<exp>);" as a new kind of statement.
    Changed representation of abstract syntax tree for some
        "new" expressions.

****************************************************************
