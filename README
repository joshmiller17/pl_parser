Josh Miller
joshm
miller.josh@husky.neu.edu
parser

This project was written in Python, you can execute it using:
> ./jmiller_parser24 <input> <output>
or, equivalently
> python jm_parser24.py <input> <output>
For more information on the usage, enter:
> python jm_parser24.py --help

Other files in this directory:
    LICENSE        Generated by my Git repo
	demo1.q24      A demo program to show where my program succeeds
	demo2.q24      A demo program to show where my program mostly succeeds
    unindent.py    A helper file I used while debugging, unindents input file
	chardiff.py    A helper file I used while debugging, removes whitespace
                   and diffs inputs character by character

NOTES AND KNOWN BUGS
Because I didn't use a parser generator for this project,
parsing was very difficult and this project took many many hours and
over 2900 lines of code, which became messier as I continued.
Since my tokenizing used whitespace as a delimiter, most of my issues
involved tokens which have whitespace in them, or tokens which are
recursively composed. The program is best at handling high-level structures:
    - protodecs
	- funprotos
	- fundecs
	- formals
	- classes
I had more difficulty with building up <exp>s from their underlying <factor>s,
since my approach was to internally compile factors into terms into simples,
and so forth. The language's grammar is built into my program, but not all of
the code is working, and therefore it can't often produce complete ASTs
for examples, even though it parses through the tokens reasonably well
and builds an internal understanding of the program (inevitably,
tripping up on one thing which causes the rest to collapse).
Were everything working correctly, I would take great pride in the
error messages that I've added in to each grammatical possibility.
I learned a lot from this assignment though,
and if I had time to do it over I would have used a generator,
or taken a much more recursive approach, rather than a context-sensitive
one which is more human-readable as a code outline.
Since the program struggles with <exp>s and some <stm>s, I've made the final
version print out some of its internal factors, to show that it is recognizing
these expressions, but just having trouble combining them. I've also
added many comments to show what the process is intended to be, and
you may use the -debug option (with an input of 0-3) to see more on that.
Please see the two attached demo programs as proof that the program can,
on simple programs, parse the general outline of the code.
I would have asked for an extension to polish out some of these bugs,
but I have a paper (and two more I'm co-authoring) due Dec 21 that I
need to dedicate my attention to.
As a final note, thank you for your efforts in teaching and grading,
I hope that you can see the effort put into this buggy program,
despite its faults in final output.