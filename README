README INSTRUCTIONS:


	Its first line must consist of your name.
	Its second line must consist of your CCIS ID.
	Its third line must consist of the email address you would like for us to use when reporting your grade for the project.
	Its fourth line must specify the component you implemented, one of
	parser
	type checker
	interpreter
	translator
	code generator
	Its fifth line must be blank.
	Your README file must then explain how we can use a CCIS Linux machine to convert your submitted source code into an executable version of your software that will run on a CCIS Linux machine.
	Your README file must then explain how we can run the executable version of your software on a CCIS Linux machine. We would appreciate it if you would make the command line needed to run your component compatible with the command line needed to run the instructor's version of your component.
	Your README file should also list any known bugs or other known issues with your software.
	To submit your semester project:

	Copy your README file and all other files you intend to submit into the CCIS shared file system.
	On the CCIS shared file system, put your README file and all other files you intend to submit into a single directory named project. Don't put any extraneous stuff in that directory.
	Log into a CCIS Linux machine, use the tar utility to create a project.tgz file that packages your entire project directory into a single compressed file, and submit that file using the /course/cs7400f18/submit program as shown below. When you submit that file, you will also tell us your CCIS ID. Suppose, for example, your CCIS ID is sidewinder. (It isn't, of course.) Then you would submit your program like this:
			  $ ssh sidewinder@login.ccs.neu.edu
			  % [cd to the directory containing your project directory]
			  % cd project/..
			  % tar -czf project.tgz project
			  % /course/cs7400f18/submit sidewinder project.tgz
			  % logout
	(Use your own CCIS ID instead of sidewinder.)
	If all goes well, step 3 will end by giving you a confirmation number. Please record your confirmation number so you can prove you have submitted the assignment.










This directory contains pieces of an implementation of quirk24,
along with a few examples and some documentation.

Files:

    README                this file
    VERSION               current version number for all files
    parser24              executable parser
    typecheck24           executable type checker
    interp24              executable interpreter

    parser24.sps.fasl     compiled code needed by parser24
    typecheck24.sps.fasl  compiled code needed by typecheck24
    interp24.sps.fasl     compiled code needed by interp24

    example1.q24          an example illustrating the type system
    example2.q24          an example illustrating expressions
    example3.q24          an example illustrating integer overflow
    example4.q24          an example using both arrays and lists

****************************************************************

The parser can be invoked as in the following example:

    /course/cs7400f18/Quirk24/parser24 example1.q24 example1.ast

The example1.q24 file must already exist and must contain quirk24
code.  The example1.ast file will be deleted if it already exists.
In any case, the abstract syntax tree for example1.q24 will be
written to example1.ast.

****************************************************************

The type checker can be invoked as in the following example:

    /course/cs7400f18/Quirk24/typecheck24 example4.ast example4.ast2

The example4.q24 file must already exist and must contain an
abstract syntax tree produced by parser24.  The example4.ast2
file will be deleted if it already exists.  In any case, an
abstract syntax tree will be written to example4.ast2.

****************************************************************

The interpreter can be invoked as in the following example:

    /course/cs7400f18/Quirk24/interp24 example4.ast2

The example4.ast2 file must already exist.

That abstract syntax tree should be as produced by the type
checker.  As a temporary expedient, however, the interpreter
found in this directory will accept abstract syntax trees
produced by the parser provided they would be accepted as
well-typed by the type checker.  (Interpreters written by
students need only accept as input abstract syntax trees
produced by type checkers.)

****************************************************************

Change history.

Version -3 (in progress; more changes may be added here)

    Added (illegal) production for <program>.
    Added description of the small differences between abstract
        syntax trees produced by parser and abstract syntax
        trees produced by type checkers.
    Added -:int and -:flt productions for <unop>.

Version -4

    Added type checker.
    Corrected type errors in example programs.

Version -5

    Allowed any type within the angle brackets of a <typeapp>.

Version -6

    Allowed "return;" as well as "return <exp>;".
    Added "halt(<exp>);" as a new kind of statement.
    Changed representation of abstract syntax tree for some
        "new" expressions.

****************************************************************
